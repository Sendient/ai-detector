name: Deploy Frontend to Azure Static Web App

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (dev, stg, prod, dev1)'
        required: true
        default: 'dev1' # Default value, adjust as needed
        type: string
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev1, dev, stg, prod)'
        required: true
        type: choice
        options:
          - dev1
          - dev
          - staging
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  build_and_deploy:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || inputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}' 
          enable-AzPSSession: false

      - name: Get Static Web App deployment token and URL
        id: get_swa_details
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || inputs.environment }}"
          APP_NAME="app-sdt-uks-aid-${ENVIRONMENT}"
          RG_NAME="rg-sdt-uks-aid-${ENVIRONMENT}"
      
          # Get the deployment token
          TOKEN=$(az staticwebapp secrets list \
            --name "$APP_NAME" \
            --resource-group "$RG_NAME" \
            --query properties.apiKey \
            --output tsv)
      
          # Mask the token
          echo "::add-mask::$TOKEN"
      
          # Get the default hostname (i.e., app URL)
          URL=$(az staticwebapp hostname list -n "app-sdt-uks-aid-${{ github.event.inputs.environment || inputs.environment }}" --resource-group "rg-sdt-uks-aid-${{ github.event.inputs.environment || inputs.environment }}" --query "[0].domainName" --output tsv)
      
          # Output both for downstream use
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
          echo "url=https://$URL" >> $GITHUB_OUTPUT
        

      - name: Get Container App URL
        id: get_app_url
        run: |
          APP_URL=$(az containerapp show \
            --name "ca-sdt-uks-aid-${{ github.event.inputs.environment || inputs.environment }}" \
            --resource-group "rg-sdt-uks-aid-${{ github.event.inputs.environment || inputs.environment }}" \
            --query properties.configuration.ingress.fqdn \
            --output tsv)

          echo "Raw APP_URL from Azure: $APP_URL"
          
          # Ensure it's an HTTPS URL before setting it as output
          # (This logic is just for safety, the main check is the raw APP_URL)
          FINAL_APP_URL_OUTPUT=""
          if [[ "$APP_URL" == http://* ]]; then
            echo "Warning: APP_URL from Azure started with http://. Stripping it and prepending https://."
            FINAL_APP_URL_OUTPUT="https://${APP_URL#http://}"
          elif [[ "$APP_URL" == https://* ]]; then
            echo "APP_URL from Azure already started with https://."
            FINAL_APP_URL_OUTPUT="$APP_URL"
          else
            # Assuming it's just the FQDN without protocol, prepend https://
            echo "APP_URL from Azure did not have a scheme. Prepending https://."
            FINAL_APP_URL_OUTPUT="https://$APP_URL"
          fi

          echo "Final APP_URL_OUTPUT to be used for GitHub step output: $FINAL_APP_URL_OUTPUT"
          echo "url=$FINAL_APP_URL_OUTPUT" >> $GITHUB_OUTPUT

      - name: Create .env file
        run: |
          echo "Debug: Value of steps.get_app_url.outputs.url going into .env: ${{ steps.get_app_url.outputs.url }}"
          cd frontend
          echo "VITE_API_BASE_URL=${{ steps.get_app_url.outputs.url }}" > .env
          echo "VITE_KINDE_DOMAIN=${{ vars.VITE_KINDE_DOMAIN }}" >> .env
          echo "VITE_KINDE_CLIENT_ID=${{ vars.VITE_KINDE_CLIENT_ID }}" >> .env
          echo "VITE_KINDE_LOGIN_REDIRECT_URI=${{ steps.get_swa_details.outputs.url }}" >> .env
          echo "VITE_KINDE_LOGOUT_REDIRECT_URI=${{ steps.get_swa_details.outputs.url }}" >> .env
          echo "VITE_KINDE_AUDIENCE=${{ vars.VITE_KINDE_AUDIENCE }}" >> .env
          echo "VITE_API_PROXY_PATH=${{ vars.VITE_API_PROXY_PATH }}" >> .env
          echo "VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}" >> .env
          echo "VITE_STRIPE_PRO_PLAN_PRICE_ID=${{ vars.VITE_STRIPE_PRO_PLAN_PRICE_ID }}" >> .env

      - name: Deploy to Azure Static Web Apps
        uses: azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.get_swa_details.outputs.token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "frontend"
          output_location: "dist"
          app_build_command: "npm run build"
          api_location: ""
          app_artifact_location: "dist"
          # deployment_environment: "Production"