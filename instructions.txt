## Azure Configuration for Stripe Integration (Multi-Environment Strategy)

This document outlines the principles and specific setup for configuring Stripe integration variables across different Azure environments (dev1, stg, prod) for the AI Detector application, using Azure Key Vault and Azure Container Apps.

### Principles:

1.  **Centralized Secret Management:** All sensitive information (API keys, secrets) is stored securely in Azure Key Vault. This provides a single source of truth for secrets, enhances security, and allows for auditing.
2.  **Environment-Specific Secrets:** For each environment (dev1, stg, prod), distinct secrets are created in Key Vault (e.g., `stripe-secret-dev1`, `stripe-secret-stg`). This ensures that each environment uses its own isolated set of credentials and configurations.
3.  **Container App Secret Referencing:** Azure Container Apps do not store the actual secret values directly. Instead, they store *references* (aliases) to the secrets held in Azure Key Vault. This maintains a separation of concerns and leverages Key Vault's security.
4.  **Environment Variable Mapping:** Within each Container App (for both backend and frontend), these Container App secret references (aliases) are mapped to specific environment variable names that the application code expects (e.g., `STRIPE_SECRET_KEY`, `VITE_STRIPE_PUBLISHABLE_KEY`).
5.  **Application Code Agnosticism:** The application code (FastAPI backend, Vite frontend) remains environment-agnostic. It reads configuration from standard environment variable names. The Azure infrastructure handles injecting the correct values for the specific environment it's running in.
6.  **Managed Identity:** Container Apps should use Managed Identities with appropriate "Get Secret" permissions on the Azure Key Vault to securely access the referenced secrets.

### Configuration for `dev1` Environment:

**1. Azure Key Vault (`kv-sdt-uks-aid-dev1`):**

The following secrets have been created/updated in this Key Vault specifically for the `dev1` environment:

*   **`stripe-secret-dev1`**:
    *   **Value:** The Stripe **Secret Key** for `dev1` (e.g., `sk_test_...` or `sk_live_...`). (Actual value confirmed to be at version `...ca1cac48c0fb4c30a8e5c3da1a450438`).
    *   **Purpose:** Used by the backend to authenticate API calls to Stripe.
*   **`stripe-webhook-secret-dev1`**:
    *   **Value:** The Stripe **Webhook Signing Secret** for `dev1` (e.g., `whsec_...`).
    *   **Purpose:** Used by the backend to verify incoming webhook events from Stripe.
*   **`stripe-pro-plan-price-id-dev1`**:
    *   **Value:** The Stripe **Price ID** for the "Pro" plan in `dev1` (e.g., `price_...`).
    *   **Purpose:** Used by the backend to create Stripe Checkout Sessions.
*   **`vite-stripe-publishable-key-dev1`**:
    *   **Value:** The Stripe **Publishable Key** for `dev1` (e.g., `pk_test_...` or `pk_live_...`).
    *   **Purpose:** Used by the frontend (Stripe.js) for client-side operations.

**2. Backend Container App (`ca-sdt-uks-aid-dev1`):**

*   **Container App Secrets (Aliases Referencing Key Vault):**
    *   Alias: `stripe-secret-key` -> Referencing Key Vault secret `stripe-secret-dev1` (specifically URL: `https://kv-sdt-uks-aid-dev1.vault.azure.net/secrets/stripe-secret-dev1/ca1cac48c0fb4c30a8e5c3da1a450438`).
    *   Alias: `backend-kvref-stripe-webhook` -> Referencing Key Vault secret `stripe-webhook-secret-dev1`.
    *   Alias: `backend-kvref-stripe-price-id` -> Referencing Key Vault secret `stripe-pro-plan-price-id-dev1`.
*   **Environment Variables (Mapped in Container Revision):**
    *   `STRIPE_SECRET_KEY` -> Mapped from Container App secret alias `stripe-secret-key`.
    *   `STRIPE_WEBHOOK_SECRET` -> Mapped from Container App secret alias `backend-kvref-stripe-webhook`.
    *   `STRIPE_PRO_PLAN_PRICE_ID` -> Mapped from Container App secret alias `backend-kvref-stripe-price-id`.
    *   `FRONTEND_URL` -> Manual entry: `https://gray-mud-0fe5b3703.6.azurestaticapps.net` (Confirmed as correct for `dev1` frontend).

**3. Frontend Container App (Name to be confirmed, e.g., `ca-sdt-uks-aid-frontend-dev1`):**

*   **Container App Secrets (Aliases Referencing Key Vault):**
    *   Alias: (e.g., `frontend-stripe-publishable-key-ref`) -> Referencing Key Vault secret `vite-stripe-publishable-key-dev1`.
*   **Environment Variables (Mapped in Container Revision):**
    *   `VITE_STRIPE_PUBLISHABLE_KEY` -> Mapped from Container App secret alias (e.g., `frontend-stripe-publishable-key-ref`).
    *   `VITE_API_BASE_URL` -> Manual entry: The public HTTPS URL of the `dev1` backend container app (i.e., `ca-sdt-uks-aid-dev1`).

### To-Do & Future Considerations:

1.  **Verify Values:** Double-check that the actual secret values for `dev1` (Stripe keys, IDs, webhook secret) are correctly populated in the corresponding Key Vault secrets (`stripe-secret-dev1`, `stripe-webhook-secret-dev1`, etc.). (Stripe Secret Key value for `stripe-secret-dev1` confirmed to be at the specified version).
2.  **Cleanup Placeholders in Key Vault:**
    *   Review the generic `stripe-secret-key` (without `-dev1` suffix) in Key Vault `kv-sdt-uks-aid-dev1`. If `stripe-secret-dev1` is now the definitive secret for the dev1 Stripe Secret Key, and the generic one was a placeholder, consider deleting the generic `stripe-secret-key` to avoid confusion. Confirm it's not referenced by any Container App secret before deleting.
3.  **Configuration for `stg` and `prod` Environments:**
    *   **Key Vault:** Create new secrets in Key Vault for `stg` and `prod` with appropriate suffixes (e.g., `stripe-secret-stg`, `stripe-webhook-secret-prod`). Populate them with the respective Stripe keys/IDs for those environments.
    *   **Container Apps:** For the `stg` and `prod` Container Apps (both backend and frontend), configure their "Secrets" sections to reference these new `stg` and `prod` Key Vault secrets, using appropriate alias names within each Container App.
    *   **Environment Variables:** Update the environment variable mappings in the `stg` and `prod` Container App revisions. This includes `FRONTEND_URL` (for backend) and `VITE_API_BASE_URL` (for frontend) to point to the correct URLs for each environment.
4.  **Stripe Dashboard Webhook URLs:** Ensure that for each environment (dev1, stg, prod), the Stripe Dashboard has a webhook endpoint configured with the correct public URL of the respective backend container app (e.g., `https://[backend-dev1-url]/webhooks/stripe`, `https://[backend-stg-url]/webhooks/stripe`). Each of these Stripe webhook configurations will have its own Webhook Signing Secret, which corresponds to the `STRIPE_WEBHOOK_SECRET` value stored in Key Vault for that environment.
5.  **Managed Identity Permissions:** Confirm that the Managed Identities assigned to the backend and frontend Container Apps have the necessary "Get Secret" permissions on the Azure Key Vault (`kv-sdt-uks-aid-dev1`). This is usually configured under Key Vault > Access policies or Access control (IAM) depending on the permission model used (Vault access policy or Azure RBAC).


## Understanding Identity, Subscription, and RBAC Flow in the Application

This document outlines how different identifiers (`kinde_id`, internal `teacher_id`, Stripe IDs) are used within the application to manage user identity, link to third-party services like Kinde (for authentication) and Stripe (for payments), and implement Role-Based Access Control (RBAC). The `Teacher` model is the central entity where these identifiers and related statuses converge.

### 1. Core Identifiers

#### a. Kinde ID (`kinde_id`)
*   **Source**: Provided by the Kinde Authentication service upon successful user login. It's typically part of the JWT (JSON Web Token) claims.
*   **Nature**: A string unique to each user within your Kinde instance.
*   **Role in Application**:
    *   Acts as the primary link between the external authentication system (Kinde) and an application user record (`Teacher` model).
    *   Used immediately after authentication to look up or create the corresponding `Teacher` record in the application's database.
*   **Storage**: Stored as a mandatory, indexed field on the `Teacher` model.

#### b. Internal Teacher ID (`id` or `_id`)
*   **Source**: Generated by the application's database (MongoDB) when a new `Teacher` record is created. This is typically a UUID or MongoDB ObjectId. In Pydantic models, it's often aliased from `_id` (database field name) to `id` (model field name).
*   **Nature**: A unique identifier for each teacher record *within the application's internal database*.
*   **Role in Application**:
    *   **Primary Internal Key**: Serves as the stable, internal primary key for the `Teacher` collection.
    *   **Database Relationships**: Used as a foreign key in other database collections to establish relationships (e.g., a `Document` or `ClassGroup` created by a teacher would store this `teacher_id` to signify ownership or association).
    *   **RBAC Core**: Central to many RBAC checks, especially for resource ownership and linking actions to a specific, verified internal user account.
    *   **Internal Logging & Auditing**: Provides a consistent internal reference to a user.
*   **Storage**: Stored as the `_id` field in the `teachers` MongoDB collection and represented as `id` in the `Teacher` Pydantic model.

### 2. Stripe Integration Identifiers

These IDs link a `Teacher` record to their financial and subscription details in Stripe.

#### a. Stripe Customer ID (`stripe_customer_id`)
*   **Source**: Generated by the Stripe API when a new customer object is created in Stripe for a teacher (typically when they first initiate a subscription).
*   **Nature**: A string unique to each customer in your Stripe account (e.g., `cus_xxxxxxxxxxxxxx`).
*   **Role in Application**:
    *   Links the application's `Teacher` record to the corresponding customer entity in Stripe.
    *   Essential for creating subscriptions, managing payment methods, and redirecting to the Stripe customer portal.
*   **Storage**: Stored as an optional, indexed field on the `Teacher` model.
*   **Linkage Detail**: When creating the Stripe Customer, metadata including the internal `teacher_id` (as `teacher_internal_id`) and `kinde_id` (as `teacher_kinde_id`) is passed to Stripe. This provides a robust reverse link from Stripe back to the application's user identifiers for auditing and reconciliation.

#### b. Stripe Subscription ID (`stripe_subscription_id`)
*   **Source**: Generated by the Stripe API when a teacher successfully subscribes to a plan (e.g., the "Pro" plan).
*   **Nature**: A string unique to each subscription in your Stripe account (e.g., `sub_xxxxxxxxxxxxxx`).
*   **Role in Application**:
    *   Identifies a specific active or past subscription for a teacher.
    *   Used by Stripe webhooks to refer to events related to that specific subscription (e.g., updates, renewals, cancellations).
*   **Storage**: Stored as an optional, indexed field on the `Teacher` model.

### 3. The `Teacher` Model: The Central Hub

The `Teacher` model (defined in `backend/app/models/teacher.py`) is pivotal. It aggregates these identifiers and other critical information:

*   **`id` (`_id`)**: The internal primary key (UUID).
*   **`kinde_id`**: The link to Kinde authentication.
*   **Profile Information**: `first_name`, `last_name`, `email`, `school_name`, etc.
*   **Role & Permissions Fields**:
    *   `role` (e.g., `TeacherRole.TEACHER`, `TeacherRole.ADMIN`)
    *   `is_administrator` (boolean)
    *   `is_active` (boolean)
*   **Stripe-Related Fields**:
    *   `stripe_customer_id`
    *   `stripe_subscription_id`
    *   `current_plan` (e.g., `SubscriptionPlan.FREE`, `SubscriptionPlan.PRO`) - *Crucial for RBAC feature gating.*
    *   `subscription_status` (e.g., `StripeSubscriptionStatus.ACTIVE`, `StripeSubscriptionStatus.CANCELED`)
    *   `current_period_end` (datetime for subscription validity)

### 4. Interplay and RBAC Flow

Here’s how these elements work together to enable RBAC:

1.  **Authentication and User Context Establishment**:
    *   A user logs in via Kinde.
    *   Kinde authenticates the user and issues a JWT containing their `kinde_id`.
    *   The application backend receives requests with this JWT. A dependency (e.g., `get_current_teacher`) validates the token and extracts the `kinde_id`.
    *   This `kinde_id` is used to query the `teachers` collection in MongoDB to retrieve the full `Teacher` object/document. This object now contains the internal `id` (`teacher_id`), Kinde details, Stripe details, roles, and subscription plan. This `Teacher` object becomes the "current user" context for the request.

2.  **RBAC Logic and Permission Checks**:
    Once the `Teacher` object is fetched, RBAC decisions are made based on its attributes:
    *   **Role-Based Access**:
        *   Checks like `if current_teacher.role == TeacherRole.ADMIN:` or `if current_teacher.is_administrator:` control access to administrative functionalities.
    *   **Subscription-Based Feature Gating**:
        *   Checks like `if current_teacher.current_plan == SubscriptionPlan.PRO:` determine if the user can access premium features. This is updated via Stripe webhooks ensuring it reflects the actual subscription status.
    *   **Resource Ownership and Access**:
        *   Many other models in the system (e.g., `Documents`, `ClassGroups`, `AssessmentTasks`) will have a field like `teacher_id` (or `owner_id`, etc.) that stores the `Teacher.id` (internal MongoDB `_id`) of the teacher who owns or is associated with that resource.
        *   When a teacher attempts to access or modify such a resource, RBAC logic will compare the `resource.teacher_id` with the `current_teacher.id`. Access is granted only if they match (or if the `current_teacher` is an administrator with override permissions).
    *   **Account Status**: `if current_teacher.is_active:` can prevent inactive users from accessing the system.

3.  **Stripe Webhooks and Data Synchronization**:
    *   Stripe sends webhooks to the application for events like `checkout.session.completed`, `invoice.paid`, `customer.subscription.updated/deleted`.
    *   These webhooks contain the `stripe_customer_id` and/or `stripe_subscription_id`.
    *   The application uses these Stripe IDs to find the corresponding `Teacher` record in its database.
    *   It then updates the teacher's `current_plan`, `subscription_status`, `current_period_end`, and `stripe_subscription_id` (if applicable) based on the webhook event.
    *   This ensures that the `Teacher` model in the application database always has an up-to-date reflection of the user's subscription status, which is then used for RBAC.

### 5. Conceptual Data Flow and Relationship Diagram
